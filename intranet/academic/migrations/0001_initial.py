# Generated by Django 3.0.6 on 2020-05-08 12:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='code')),
                ('semester', models.PositiveIntegerField(choices=[(1, 'Odd'), (2, 'Even'), (3, 'Short')], default=1, verbose_name='semester')),
                ('date_start', models.DateField(help_text='Academic start date', null=True, verbose_name='date start')),
                ('date_registration', models.DateField(help_text='Registration open date', null=True, verbose_name='registration date')),
                ('date_preparation', models.DateField(help_text='Admin or staff preparing lecture and schedule.', null=True, verbose_name='preparation date')),
                ('date_lecture_open', models.DateField(help_text='Student start to learn.', null=True, verbose_name='lecture start date')),
                ('date_lecture_close', models.DateField(help_text='Lecture activity ended, teacher complete required report and score .', null=True, verbose_name='lecture end date')),
                ('date_completion', models.DateField(help_text='Lecture closed forever.', null=True, verbose_name='date completion')),
                ('date_end', models.DateField(help_text='Academic end', null=True, verbose_name='date end')),
            ],
            options={
                'verbose_name': 'academic year',
                'verbose_name_plural': 'academic years',
            },
        ),
        migrations.CreateModel(
            name='Concentration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.SlugField(blank=True, max_length=3, null=True, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'concentration',
                'verbose_name_plural': 'concentrations',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('old_code', models.CharField(help_text='Maintain legacy system data integrity', max_length=256, null=True, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('level', models.PositiveIntegerField(choices=[(5, 'D3'), (7, 'S1'), (8, 'S2'), (9, 'S3')], default=7, verbose_name='level')),
                ('year_offered', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4')], default=1, verbose_name='year offered')),
                ('summary', models.CharField(blank=True, max_length=256, null=True, verbose_name='summary')),
                ('description', models.TextField(blank=True, max_length=10000, null=True, verbose_name='description')),
                ('meeting', models.PositiveIntegerField(default=0, verbose_name='Meeting')),
                ('practice', models.PositiveIntegerField(default=0, verbose_name='Practice')),
                ('field_practice', models.PositiveIntegerField(default=0, verbose_name='Field')),
                ('simulation', models.PositiveIntegerField(default=0, verbose_name='Simulation')),
                ('total', models.PositiveIntegerField(default=0, editable=False, verbose_name='Total')),
                ('learning_program', models.URLField(blank=True, help_text='Lecture Program Unit a.k.a SAP', null=True, verbose_name='learning program')),
                ('dictate', models.URLField(blank=True, null=True, verbose_name='dictate')),
                ('teaching_material', models.URLField(blank=True, null=True, verbose_name='teaching material')),
                ('practice_program', models.URLField(blank=True, null=True, verbose_name='practice program')),
                ('syllabus', models.URLField(blank=True, null=True, verbose_name='syllabus')),
                ('is_active', models.BooleanField(default=True, verbose_name='active status')),
                ('is_public', models.BooleanField(default=True, verbose_name='Public')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'ordering': ('inner_id',),
            },
        ),
        migrations.CreateModel(
            name='CourseEqualizer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('sks_old_course', models.IntegerField(verbose_name='SKS old')),
                ('sks_new_course', models.IntegerField(verbose_name='SKS new')),
            ],
            options={
                'verbose_name': 'course equalizer',
                'verbose_name_plural': 'course equalizers',
            },
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], default=1, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=512, verbose_name='Name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='Alias')),
            ],
            options={
                'verbose_name': 'course group',
                'verbose_name_plural': 'course groups',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='CourseRequisite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('score', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], default='C', max_length=2, verbose_name='min graduated score')),
            ],
            options={
                'verbose_name': 'Course prerequisite',
                'verbose_name_plural': 'Course prerequisite',
            },
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9')], default=1, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=512, verbose_name='name')),
                ('alias', models.CharField(blank=True, max_length=512, null=True, verbose_name='alias')),
            ],
            options={
                'verbose_name': 'course type',
                'verbose_name_plural': 'course types',
                'ordering': ('code',),
            },
        ),
        migrations.CreateModel(
            name='Curriculum',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(max_length=256, unique=True, verbose_name='code')),
                ('year', models.CharField(choices=[('2010', '2010'), ('2011', '2011'), ('2012', '2012'), ('2013', '2013'), ('2014', '2014'), ('2015', '2015'), ('2016', '2016'), ('2017', '2017'), ('2018', '2018'), ('2019', '2019'), ('2020', '2020'), ('2021', '2021'), ('2022', '2022'), ('2023', '2023'), ('2024', '2024'), ('2025', '2025'), ('2026', '2026'), ('2027', '2027'), ('2028', '2028'), ('2029', '2029')], default='2019', max_length=4, verbose_name='year')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('sks_graduate', models.PositiveIntegerField(default=0, verbose_name='SKS graduate')),
                ('summary', models.CharField(blank=True, max_length=256, null=True, verbose_name='summary')),
                ('description', models.TextField(blank=True, max_length=10000, null=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_public', models.BooleanField(default=True, verbose_name='public')),
                ('is_primary', models.BooleanField(default=False, verbose_name='primary')),
            ],
            options={
                'verbose_name': 'Curriculum',
                'verbose_name_plural': 'Curriculums',
            },
        ),
        migrations.CreateModel(
            name='CurriculumCourse',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('semester_number', models.PositiveIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8')], default=1, null=True, verbose_name='semester')),
                ('sks_graduate', models.PositiveIntegerField(blank=True, help_text='Minimum sks graduated to enroll this course', null=True, verbose_name='SKS graduate')),
            ],
            options={
                'verbose_name': 'curricullum course',
                'verbose_name_plural': 'curricullum courses',
                'ordering': ('curriculum', 'semester_number'),
            },
        ),
        migrations.CreateModel(
            name='ManagementUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('type', models.IntegerField(choices=[(1, 'University'), (2, 'Faculty'), (3, 'Major'), (4, 'Program Study')], default=1, verbose_name='type')),
                ('number', models.CharField(blank=True, max_length=3, null=True, verbose_name='number')),
                ('code', models.SlugField(max_length=3, unique=True, verbose_name='code')),
                ('name', models.CharField(max_length=256, verbose_name='name')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'management unit',
                'verbose_name_plural': 'management units',
            },
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('code', models.CharField(editable=False, max_length=256, unique=True, verbose_name='code')),
                ('year_start', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029')], default=2019, verbose_name='year start')),
                ('year_end', models.IntegerField(choices=[(2010, '2010'), (2011, '2011'), (2012, '2012'), (2013, '2013'), (2014, '2014'), (2015, '2015'), (2016, '2016'), (2017, '2017'), (2018, '2018'), (2019, '2019'), (2020, '2020'), (2021, '2021'), (2022, '2022'), (2023, '2023'), (2024, '2024'), (2025, '2025'), (2026, '2026'), (2027, '2027'), (2028, '2028'), (2029, '2029')], default=2020, verbose_name='year end')),
            ],
            options={
                'verbose_name': 'school year',
                'verbose_name_plural': 'school years',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('numeric', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Numeric Score')),
                ('alphabetic', models.CharField(max_length=1, verbose_name='Alphabetic Score')),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Scores',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('student_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='student ID')),
                ('registration_id', models.CharField(max_length=128, null=True, verbose_name='registration ID')),
                ('registration', models.PositiveIntegerField(choices=[(1, 'Reguler'), (2, 'Transfer')], default=1, verbose_name='registration')),
                ('semester', models.PositiveIntegerField(default=0, help_text='Student semester number, updated automatically when student create enrollment document ', verbose_name='Semester')),
                ('primary', models.BooleanField(default=False, help_text='Mark as primary student object, used when login', verbose_name='primary')),
                ('status', models.CharField(choices=[('ACT', 'Active'), ('ALM', 'Alumni'), ('DRO', 'Drop Out'), ('MVD', 'Moved'), ('MSC', 'Misc')], default='ACT', max_length=128, verbose_name='status')),
                ('status_note', models.CharField(blank=True, max_length=256, null=True, verbose_name='status note')),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
                'permissions': (('register_student', 'Can Register New Student'),),
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('tid', models.CharField(help_text='Provide NIDN or Employee ID', max_length=128, null=True, unique=True, verbose_name='teacher ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active status')),
            ],
            options={
                'verbose_name': 'teacher',
                'verbose_name_plural': 'teachers',
            },
        ),
        migrations.CreateModel(
            name='ConversionScore',
            fields=[
                ('score_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='intranet_academic.Score')),
                ('ori_code', models.CharField(max_length=128, verbose_name='Origin Code')),
                ('ori_name', models.CharField(max_length=128, verbose_name='Origin Name')),
                ('ori_numeric_score', models.DecimalField(decimal_places=2, default=1, max_digits=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Origin Numeric')),
                ('ori_alphabetic_score', models.CharField(max_length=128, verbose_name='Origin Alphabetic')),
            ],
            options={
                'verbose_name': 'Conversion Score',
                'verbose_name_plural': 'Conversion Scores',
            },
            bases=('intranet_academic.score',),
        ),
        migrations.CreateModel(
            name='StudentScore',
            fields=[
                ('score_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='intranet_academic.Score')),
            ],
            options={
                'verbose_name': 'Student Score',
                'verbose_name_plural': 'Student Scores',
            },
            bases=('intranet_academic.score',),
        ),
    ]
