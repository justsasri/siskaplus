# Generated by Django 3.0.6 on 2020-05-08 12:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import intranet.lectures.enums
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('intranet_academic', '0001_initial'),
        ('intranet_rooms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('note', models.TextField(blank=True, max_length=256, null=True, verbose_name='Note for coach')),
                ('coach_review', models.TextField(blank=True, max_length=256, null=True, verbose_name='Coach review')),
                ('is_submitted', models.BooleanField(default=False, help_text='Designates whether enrollment is submitted', verbose_name='Submitted')),
                ('is_revision', models.BooleanField(default=False, help_text='Designates whether enrollment is revision version', verbose_name='Revision')),
                ('is_valid', models.BooleanField(default=False, help_text='Designates whether enrollment is valid version, this version will added to invoice', verbose_name='Valid')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to='intranet_academic.AcademicYear', verbose_name='Academic Year')),
                ('coach', models.ForeignKey(help_text='Student academic coach', on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to='intranet_academic.Teacher', verbose_name='Coach')),
                ('revision', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='intranet_lectures.Enrollment', verbose_name='Enrolment')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='intranet_academic.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
            },
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('reg_number', models.PositiveIntegerField(blank=True, editable=False, null=True, verbose_name='Reg number')),
                ('inner_id', models.CharField(blank=True, editable=False, max_length=50, null=True, unique=True, verbose_name='Inner ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('qrcode', models.ImageField(blank=True, null=True, upload_to='qrcode')),
                ('date_start', models.DateField(help_text='First schedule.', null=True, verbose_name='date start')),
                ('time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='time start')),
                ('duration', models.PositiveIntegerField(help_text='Lecture duration in minutes', verbose_name='duration')),
                ('series', models.PositiveIntegerField(help_text='Total meet up', verbose_name='series')),
                ('min_capacity', models.PositiveIntegerField(default=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='min capacity')),
                ('max_capacity', models.PositiveIntegerField(default=35, validators=[django.core.validators.MinValueValidator(1)], verbose_name='max capacity')),
                ('status', models.CharField(choices=[('DRF', 'Draft'), ('PUB', 'Published'), ('ACF', 'Archived'), ('TRS', 'Trash')], default='DRF', max_length=3, verbose_name='status')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lectures', to='intranet_academic.AcademicYear', verbose_name='academic year')),
                ('assistant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assist_lectures', to='intranet_academic.Teacher', verbose_name='assistant')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_academic.Course', verbose_name='course')),
                ('curriculum', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_academic.Curriculum', verbose_name='curriculum')),
                ('curriculum_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_academic.CurriculumCourse', verbose_name='course')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lectures', to='intranet_rooms.Room', verbose_name='room')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_academic.Teacher', verbose_name='Teacher')),
            ],
            options={
                'verbose_name': 'lecture',
                'verbose_name_plural': 'lectures',
            },
        ),
        migrations.CreateModel(
            name='LectureSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('session', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='session')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='date')),
                ('time_start', models.TimeField(default=django.utils.timezone.now, verbose_name='time start')),
                ('time_end', models.TimeField(default=django.utils.timezone.now, verbose_name='time end')),
                ('type', models.CharField(choices=[('1', 'Meeting'), ('2', 'E-Learning'), ('99', 'Subtitution'), ('3', 'Mid Exam'), ('4', 'Final Exam')], default='1', max_length=3, verbose_name='Type')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='intranet_lectures.Lecture', verbose_name='lecture')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lecture_schedules', to='intranet_rooms.Room', verbose_name='room name')),
            ],
            options={
                'verbose_name': 'lecture schedule',
                'verbose_name_plural': 'lecture schedules',
            },
        ),
        migrations.CreateModel(
            name='LectureStudent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('status', models.CharField(choices=[('N', 'New'), ('R', 'Repeat')], default='N', max_length=3, verbose_name='Status')),
                ('is_active', models.BooleanField(default=False, verbose_name='is public')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='intranet_lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_academic.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'lecture student',
                'verbose_name_plural': 'lecture students',
                'unique_together': {('lecture', 'student')},
            },
        ),
        migrations.CreateModel(
            name='LectureScoreWeighting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('attendance', models.PositiveIntegerField(default=15, verbose_name='attendance')),
                ('homework1', models.PositiveIntegerField(default=10, verbose_name='homework 1')),
                ('homework2', models.PositiveIntegerField(default=10, verbose_name='homework 2')),
                ('quis1', models.PositiveIntegerField(default=10, verbose_name='quis 1')),
                ('quis2', models.PositiveIntegerField(default=10, verbose_name='quis 2')),
                ('mid_exam', models.PositiveIntegerField(default=20, verbose_name='mid exam')),
                ('final_exam', models.PositiveIntegerField(default=25, verbose_name='final exam')),
                ('lecture', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='intranet_lectures.Lecture', verbose_name='lecture')),
            ],
            options={
                'verbose_name': 'score weighting',
                'verbose_name_plural': 'score weightings',
            },
        ),
        migrations.CreateModel(
            name='TeacherAttendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('status', models.CharField(choices=[('PR', 'Present'), ('SC', 'Sick'), ('AB', 'Absent'), ('PE', 'Permit')], default='PR', max_length=3, verbose_name='Status')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='intranet_lectures.LectureSchedule', verbose_name='Schedule')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='intranet_academic.Teacher', verbose_name='Teacher')),
            ],
            options={
                'verbose_name': 'Teacher Attendance',
                'verbose_name_plural': 'Teacher Attendances',
                'unique_together': {('schedule', 'teacher')},
            },
        ),
        migrations.CreateModel(
            name='StudentPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('criteria', models.CharField(choices=[('1', 'NEW'), ('2', 'REMEDY')], default='1', max_length=2, verbose_name='Criteria')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_plans', to='intranet_lectures.Lecture', verbose_name='Lecture')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_plans', to='intranet_academic.Student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Enrollment Plan',
                'verbose_name_plural': 'Enrollment Plans',
                'unique_together': {('student', 'lecture')},
            },
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('status', models.CharField(choices=[('PR', 'Present'), ('SC', 'Sick'), ('AB', 'Absent'), ('PE', 'Permit')], default='PR', max_length=3, verbose_name='Status')),
                ('note', models.CharField(blank=True, max_length=512, null=True, verbose_name='Note')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='intranet_lectures.LectureSchedule', verbose_name='Schedule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='intranet_lectures.LectureStudent', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Student Attendance',
                'verbose_name_plural': 'Student Attendances',
                'unique_together': {('schedule', 'student')},
            },
        ),
        migrations.CreateModel(
            name='EnrollmentItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='uuid')),
                ('criteria', models.CharField(choices=[('1', 'NEW'), ('2', 'REMEDY')], default=intranet.lectures.enums.EnrollmentCriteria['NEW'], max_length=2, verbose_name='Criteria')),
                ('mark', models.CharField(choices=[('CHECK', 'Check'), ('VALID', 'Valid'), ('DELETED', 'Deleted')], default='CHECK', max_length=10, verbose_name='Status')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lectures', to='intranet_lectures.Enrollment', verbose_name='Enrolment')),
                ('lecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='intranet_lectures.Lecture', verbose_name='Lecture')),
            ],
            options={
                'verbose_name': 'Enrollment Item',
                'verbose_name_plural': 'Enrollment Items',
                'unique_together': {('enrollment', 'lecture')},
            },
        ),
    ]
